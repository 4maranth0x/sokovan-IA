def busqueda_profundidad(estado_inicial, acciones_aplicables, aplica, objetivo, max_niveles=64):
    frontera = [(estado_inicial, [])]
    visitados = set()
    num_niveles = 0
    while frontera and num_niveles < max_niveles:
        estado, camino = frontera.pop()
        if estado in visitados:
            continue
        visitados.add(estado)
        if objetivo(estado):
            return camino
        if num_niveles >= 10 and len(camino) >= num_niveles:
            continue
        for accion in acciones_aplicables(estado):
            if aplica(estado, accion):
                nuevo_estado = aplica(estado, accion)
                nuevo_camino = camino + [accion]
                frontera.append((nuevo_estado, nuevo_camino))
        num_niveles += 1
    return None

def busqueda_amplitud(estado_inicial, acciones_aplicables, aplica, objetivo, max_niveles=64):
    frontera = [(estado_inicial, [])]
    visitados = set()
    num_niveles = 0
    while frontera and num_niveles < max_niveles:
        estado, camino = frontera.pop(0)
        if estado in visitados:
            continue
        visitados.add(estado)
        if objetivo(estado):
            return camino
        if num_niveles >= 10 and len(camino) >= num_niveles:
            continue
        for accion in acciones_aplicables(estado):
            if aplica(estado, accion):
                nuevo_estado = aplica(estado, accion)
                nuevo_camino = camino + [accion]
                frontera.append((nuevo_estado, nuevo_camino))
        num_niveles += 1
    return None

def busqueda_profundidad_iterativa(estado_inicial, acciones_aplicables, aplica, objetivo, max_niveles=64):
    for num_niveles in range(10, max_niveles):
        resultado = busqueda_profundidad(estado_inicial, acciones_aplicables, aplica, objetivo, num_niveles)
        if resultado is not None:
            return resultado
    return None
De esta manera, se puede llamar a cualquiera de las funciones de búsqueda especificando el número máximo de niveles permitidos.





User
¿Crees que sea una buena idea hacerlo en varios archivos de python?
ChatGPT
No necesariamente. Puedes poner todas las funciones en un solo archivo y luego llamarlas desde otro archivo que contenga el código principal del juego y las llamadas a las funciones de búsqueda. Sin embargo, si el proyecto es muy grande, podría ser conveniente separar el código en diferentes archivos para facilitar su organización y mantenimiento. En última instancia, la decisión dependerá de la complejidad y tamaño del proyecto en cuestión.





User
¿Cómo se vería un archivo busqueda.py, que tiene dentro todo el código de las búsquedas, que esté enlazado al archivo principal sokovan.py, donde está el código como leerMapa y las funciones de movimiento?
ChatGPT
Un ejemplo de cómo podrías estructurar el archivo busqueda.py sería el siguiente:

python
Copy code
# busqueda.py

def buscar_solucion(nivel, estrategia):
    # Implementación de la estrategia de búsqueda
    # Retorna una lista con los movimientos necesarios para resolver el nivel


def busqueda_profundidad(nivel):
    return buscar_solucion(nivel, "profundidad")


def busqueda_amplitud(nivel):
    return buscar_solucion(nivel, "amplitud")


def busqueda_profundidad_iterativa(nivel):
    solucion = None
    for profundidad_max in range(10, 65):
        solucion = buscar_solucion(nivel, "profundidad_limitada", profundidad_max)
        if solucion is not None:
            break
    return solucion
Luego, en el archivo sokovan.py, podrías importar el módulo busqueda y llamar a las funciones según necesites:

python
Copy code
# sokovan.py

import busqueda

nivel = leerMapa()

# Ejemplo de búsqueda por profundidad
movimientos = busqueda.busqueda_profundidad(nivel)
if movimientos is not None:
    print("Movimientos necesarios:", movimientos)
else:
    print("No se encontró solución.")

# Ejemplo de búsqueda por amplitud
movimientos = busqueda.busqueda_amplitud(nivel)
if movimientos is not None:
    print("Movimientos necesarios:", movimientos)
else:
    print("No se encontró solución.")

# Ejemplo de búsqueda por profundidad iterativa
movimientos = busqueda.busqueda_profundidad_iterativa(nivel)
if movimientos is not None:
    print("Movimientos necesarios:", movimientos)
else:
    print("No se encontró solución.")
De esta manera, tienes todo el código de las búsquedas en un solo archivo y puedes importarlas según necesites en tu archivo principal.






